// Generated by Dagger (https://dagger.dev).
package com.recepies.foodrecipesq;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.recepies.dbmodule.RecipeRoomDb;
import com.recepies.dbmodule.di.DbModule;
import com.recepies.dbmodule.di.DbModule_ProvideRoomDbFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideFavoriteDataSourceFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideGetRecipeByQueryRepoFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideGetRecipeDataSourceFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideGetRecipeRepositoryFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideMealDietTypeDataSourceFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideMealDietTypeRepositoryFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideSaveUserRepoFactory;
import com.recepies.foodrecipesq.di.usecase.UseCaseModule_ProvideUserPrefRepoFactory;
import com.recepies.foodrecipesq.domain.datasource.localDatasource.MealDietTypeDataSource;
import com.recepies.foodrecipesq.domain.datasource.localDatasource.RecipeFavoriteDataSource;
import com.recepies.foodrecipesq.domain.datasource.remoteDatasource.recipeDataSource.GetRecipeDataSource;
import com.recepies.foodrecipesq.domain.repository.FavoriteRecipeRepository;
import com.recepies.foodrecipesq.domain.repository.GetMealDietTypeRepository;
import com.recepies.foodrecipesq.domain.repository.GetRecipeByQueryRepo;
import com.recepies.foodrecipesq.domain.repository.GetRecipeRepository;
import com.recepies.foodrecipesq.domain.repository.GetUserPrefRepository;
import com.recepies.foodrecipesq.domain.repository.SaveUserPrefRepo;
import com.recepies.foodrecipesq.domain.usecase.AddFavoriteRecipeUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetFavoriteRecipesByIdUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetFavoriteRecipesUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetMealDietTypeUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetRecipeByQueryUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetRecipeJokeUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetRecipeUseCase;
import com.recepies.foodrecipesq.domain.usecase.GetUserPrefMealAndDietTypeUseCase;
import com.recepies.foodrecipesq.domain.usecase.RemoveFavoriteRecipeUseCase;
import com.recepies.foodrecipesq.domain.usecase.SaveUserPrefUseCase;
import com.recepies.foodrecipesq.presentation.activities.MainActivity;
import com.recepies.foodrecipesq.presentation.activities.RecipeDetailActivity;
import com.recepies.foodrecipesq.presentation.fragments.FavoriteRecipeFragment;
import com.recepies.foodrecipesq.presentation.fragments.FoodRecipeFragment;
import com.recepies.foodrecipesq.presentation.fragments.JokeRecipeFragment;
import com.recepies.foodrecipesq.presentation.fragments.RecipeFilterBottomSheetFrag;
import com.recepies.foodrecipesq.presentation.fragments.RecipeOverviewFragment;
import com.recepies.foodrecipesq.presentation.viewmodels.FavoriteRecipeViewModel;
import com.recepies.foodrecipesq.presentation.viewmodels.FavoriteRecipeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.recepies.foodrecipesq.presentation.viewmodels.FoodRecipeViewModel;
import com.recepies.foodrecipesq.presentation.viewmodels.FoodRecipeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.recepies.foodrecipesq.presentation.viewmodels.JokeRecipeViewModel;
import com.recepies.foodrecipesq.presentation.viewmodels.JokeRecipeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.recepies.foodrecipesq.presentation.viewmodels.RecipeDetailViewModel;
import com.recepies.foodrecipesq.presentation.viewmodels.RecipeDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.recepies.foodrecipesq.presentation.viewmodels.RecipeFilterViewModel;
import com.recepies.foodrecipesq.presentation.viewmodels.RecipeFilterViewModel_HiltModules_KeyModule_ProvideFactory;
import com.recepies.network.ApiService;
import com.recepies.network.RetrofitClient;
import com.recepies.network.di.NetworkModule;
import com.recepies.network.di.NetworkModule_ProvideApiServieFactory;
import com.recepies.network.di.NetworkModule_ProvideGsonConvertorFactoryFactory;
import com.recepies.network.di.NetworkModule_ProvideOkHttpClientFactory;
import com.recepies.network.di.NetworkModule_ProvideRetorfitInstanceFactory;
import com.recepies.network.di.NetworkModule_ProvidesScalarConvertorFactoryFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.converter.scalars.ScalarsConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRecipeApplication_HiltComponents_SingletonC {
  private DaggerRecipeApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dbModule(DbModule dbModule) {
      Preconditions.checkNotNull(dbModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder useCaseModule(UseCaseModule useCaseModule) {
      Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public RecipeApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements RecipeApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public RecipeApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements RecipeApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements RecipeApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements RecipeApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements RecipeApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements RecipeApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements RecipeApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public RecipeApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends RecipeApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends RecipeApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectFavoriteRecipeFragment(FavoriteRecipeFragment arg0) {
    }

    @Override
    public void injectFoodRecipeFragment(FoodRecipeFragment arg0) {
    }

    @Override
    public void injectJokeRecipeFragment(JokeRecipeFragment arg0) {
    }

    @Override
    public void injectRecipeFilterBottomSheetFrag(RecipeFilterBottomSheetFrag arg0) {
    }

    @Override
    public void injectRecipeOverviewFragment(RecipeOverviewFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends RecipeApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends RecipeApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public void injectRecipeDetailActivity(RecipeDetailActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(5).add(FavoriteRecipeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FoodRecipeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(JokeRecipeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipeDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipeFilterViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends RecipeApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<FavoriteRecipeViewModel> favoriteRecipeViewModelProvider;

    private Provider<FoodRecipeViewModel> foodRecipeViewModelProvider;

    private Provider<JokeRecipeViewModel> jokeRecipeViewModelProvider;

    private Provider<RecipeDetailViewModel> recipeDetailViewModelProvider;

    private Provider<RecipeFilterViewModel> recipeFilterViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private GetFavoriteRecipesUseCase getFavoriteRecipesUseCase() {
      return new GetFavoriteRecipesUseCase(singletonCImpl.provdeFavoriteRecipeRepositoryProvider.get());
    }

    private RemoveFavoriteRecipeUseCase removeFavoriteRecipeUseCase() {
      return new RemoveFavoriteRecipeUseCase(singletonCImpl.provdeFavoriteRecipeRepositoryProvider.get());
    }

    private GetRecipeUseCase getRecipeUseCase() {
      return new GetRecipeUseCase(singletonCImpl.provideGetRecipeRepositoryProvider.get());
    }

    private GetUserPrefMealAndDietTypeUseCase getUserPrefMealAndDietTypeUseCase() {
      return new GetUserPrefMealAndDietTypeUseCase(singletonCImpl.provideUserPrefRepoProvider.get());
    }

    private GetRecipeByQueryUseCase getRecipeByQueryUseCase() {
      return new GetRecipeByQueryUseCase(singletonCImpl.provideGetRecipeByQueryRepoProvider.get());
    }

    private GetRecipeJokeUseCase getRecipeJokeUseCase() {
      return new GetRecipeJokeUseCase(singletonCImpl.provideGetRecipeRepositoryProvider.get());
    }

    private AddFavoriteRecipeUseCase addFavoriteRecipeUseCase() {
      return new AddFavoriteRecipeUseCase(singletonCImpl.provdeFavoriteRecipeRepositoryProvider.get());
    }

    private GetFavoriteRecipesByIdUseCase getFavoriteRecipesByIdUseCase() {
      return new GetFavoriteRecipesByIdUseCase(singletonCImpl.provdeFavoriteRecipeRepositoryProvider.get());
    }

    private GetMealDietTypeUseCase getMealDietTypeUseCase() {
      return new GetMealDietTypeUseCase(singletonCImpl.provideMealDietTypeRepositoryProvider.get());
    }

    private SaveUserPrefUseCase saveUserPrefUseCase() {
      return new SaveUserPrefUseCase(singletonCImpl.provideSaveUserRepoProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.favoriteRecipeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.foodRecipeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.jokeRecipeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.recipeDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.recipeFilterViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.recepies.foodrecipesq.presentation.viewmodels.FavoriteRecipeViewModel", ((Provider) favoriteRecipeViewModelProvider)).put("com.recepies.foodrecipesq.presentation.viewmodels.FoodRecipeViewModel", ((Provider) foodRecipeViewModelProvider)).put("com.recepies.foodrecipesq.presentation.viewmodels.JokeRecipeViewModel", ((Provider) jokeRecipeViewModelProvider)).put("com.recepies.foodrecipesq.presentation.viewmodels.RecipeDetailViewModel", ((Provider) recipeDetailViewModelProvider)).put("com.recepies.foodrecipesq.presentation.viewmodels.RecipeFilterViewModel", ((Provider) recipeFilterViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.recepies.foodrecipesq.presentation.viewmodels.FavoriteRecipeViewModel 
          return (T) new FavoriteRecipeViewModel(viewModelCImpl.getFavoriteRecipesUseCase(), viewModelCImpl.removeFavoriteRecipeUseCase());

          case 1: // com.recepies.foodrecipesq.presentation.viewmodels.FoodRecipeViewModel 
          return (T) new FoodRecipeViewModel(viewModelCImpl.getRecipeUseCase(), viewModelCImpl.getUserPrefMealAndDietTypeUseCase(), viewModelCImpl.getRecipeByQueryUseCase());

          case 2: // com.recepies.foodrecipesq.presentation.viewmodels.JokeRecipeViewModel 
          return (T) new JokeRecipeViewModel(viewModelCImpl.getRecipeJokeUseCase());

          case 3: // com.recepies.foodrecipesq.presentation.viewmodels.RecipeDetailViewModel 
          return (T) new RecipeDetailViewModel(viewModelCImpl.addFavoriteRecipeUseCase(), viewModelCImpl.getFavoriteRecipesByIdUseCase(), viewModelCImpl.removeFavoriteRecipeUseCase());

          case 4: // com.recepies.foodrecipesq.presentation.viewmodels.RecipeFilterViewModel 
          return (T) new RecipeFilterViewModel(viewModelCImpl.getMealDietTypeUseCase(), viewModelCImpl.saveUserPrefUseCase());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends RecipeApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends RecipeApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends RecipeApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<GsonConverterFactory> provideGsonConvertorFactoryProvider;

    private Provider<ScalarsConverterFactory> providesScalarConvertorFactoryProvider;

    private Provider<Retrofit> provideRetorfitInstanceProvider;

    private Provider<ApiService> provideApiServieProvider;

    private Provider<RecipeRoomDb> provideRoomDbProvider;

    private Provider<RecipeFavoriteDataSource> provideFavoriteDataSourceProvider;

    private Provider<FavoriteRecipeRepository> provdeFavoriteRecipeRepositoryProvider;

    private Provider<GetRecipeDataSource> provideGetRecipeDataSourceProvider;

    private Provider<GetRecipeRepository> provideGetRecipeRepositoryProvider;

    private Provider<MealDietTypeDataSource> provideMealDietTypeDataSourceProvider;

    private Provider<GetUserPrefRepository> provideUserPrefRepoProvider;

    private Provider<GetRecipeByQueryRepo> provideGetRecipeByQueryRepoProvider;

    private Provider<GetMealDietTypeRepository> provideMealDietTypeRepositoryProvider;

    private Provider<SaveUserPrefRepo> provideSaveUserRepoProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private RetrofitClient retrofitClient() {
      return new RetrofitClient(provideApiServieProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 2));
      this.provideGsonConvertorFactoryProvider = DoubleCheck.provider(new SwitchingProvider<GsonConverterFactory>(singletonCImpl, 3));
      this.providesScalarConvertorFactoryProvider = DoubleCheck.provider(new SwitchingProvider<ScalarsConverterFactory>(singletonCImpl, 4));
      this.provideRetorfitInstanceProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 1));
      this.provideApiServieProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonCImpl, 0));
      this.provideRoomDbProvider = DoubleCheck.provider(new SwitchingProvider<RecipeRoomDb>(singletonCImpl, 5));
      this.provideFavoriteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<RecipeFavoriteDataSource>(singletonCImpl, 7));
      this.provdeFavoriteRecipeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteRecipeRepository>(singletonCImpl, 6));
      this.provideGetRecipeDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<GetRecipeDataSource>(singletonCImpl, 9));
      this.provideGetRecipeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<GetRecipeRepository>(singletonCImpl, 8));
      this.provideMealDietTypeDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<MealDietTypeDataSource>(singletonCImpl, 11));
      this.provideUserPrefRepoProvider = DoubleCheck.provider(new SwitchingProvider<GetUserPrefRepository>(singletonCImpl, 10));
      this.provideGetRecipeByQueryRepoProvider = DoubleCheck.provider(new SwitchingProvider<GetRecipeByQueryRepo>(singletonCImpl, 12));
      this.provideMealDietTypeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<GetMealDietTypeRepository>(singletonCImpl, 13));
      this.provideSaveUserRepoProvider = DoubleCheck.provider(new SwitchingProvider<SaveUserPrefRepo>(singletonCImpl, 14));
    }

    @Override
    public void injectRecipeApplication(RecipeApplication arg0) {
      injectRecipeApplication2(arg0);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @CanIgnoreReturnValue
    private RecipeApplication injectRecipeApplication2(RecipeApplication instance) {
      RecipeApplication_MembersInjector.injectRetrofitClient(instance, retrofitClient());
      RecipeApplication_MembersInjector.injectRecipeRoomDb(instance, provideRoomDbProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.recepies.network.ApiService 
          return (T) NetworkModule_ProvideApiServieFactory.provideApiServie(singletonCImpl.provideRetorfitInstanceProvider.get());

          case 1: // retrofit2.Retrofit 
          return (T) NetworkModule_ProvideRetorfitInstanceFactory.provideRetorfitInstance(singletonCImpl.provideOkHttpClientProvider.get(), singletonCImpl.provideGsonConvertorFactoryProvider.get(), singletonCImpl.providesScalarConvertorFactoryProvider.get());

          case 2: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient();

          case 3: // retrofit2.converter.gson.GsonConverterFactory 
          return (T) NetworkModule_ProvideGsonConvertorFactoryFactory.provideGsonConvertorFactory();

          case 4: // retrofit2.converter.scalars.ScalarsConverterFactory 
          return (T) NetworkModule_ProvidesScalarConvertorFactoryFactory.providesScalarConvertorFactory();

          case 5: // com.recepies.dbmodule.RecipeRoomDb 
          return (T) DbModule_ProvideRoomDbFactory.provideRoomDb(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 6: // com.recepies.foodrecipesq.domain.repository.FavoriteRecipeRepository 
          return (T) UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory.provdeFavoriteRecipeRepository(singletonCImpl.provideFavoriteDataSourceProvider.get());

          case 7: // com.recepies.foodrecipesq.domain.datasource.localDatasource.RecipeFavoriteDataSource 
          return (T) UseCaseModule_ProvideFavoriteDataSourceFactory.provideFavoriteDataSource();

          case 8: // com.recepies.foodrecipesq.domain.repository.GetRecipeRepository 
          return (T) UseCaseModule_ProvideGetRecipeRepositoryFactory.provideGetRecipeRepository(singletonCImpl.provideGetRecipeDataSourceProvider.get());

          case 9: // com.recepies.foodrecipesq.domain.datasource.remoteDatasource.recipeDataSource.GetRecipeDataSource 
          return (T) UseCaseModule_ProvideGetRecipeDataSourceFactory.provideGetRecipeDataSource();

          case 10: // com.recepies.foodrecipesq.domain.repository.GetUserPrefRepository 
          return (T) UseCaseModule_ProvideUserPrefRepoFactory.provideUserPrefRepo(singletonCImpl.provideMealDietTypeDataSourceProvider.get());

          case 11: // com.recepies.foodrecipesq.domain.datasource.localDatasource.MealDietTypeDataSource 
          return (T) UseCaseModule_ProvideMealDietTypeDataSourceFactory.provideMealDietTypeDataSource();

          case 12: // com.recepies.foodrecipesq.domain.repository.GetRecipeByQueryRepo 
          return (T) UseCaseModule_ProvideGetRecipeByQueryRepoFactory.provideGetRecipeByQueryRepo(singletonCImpl.provideGetRecipeDataSourceProvider.get());

          case 13: // com.recepies.foodrecipesq.domain.repository.GetMealDietTypeRepository 
          return (T) UseCaseModule_ProvideMealDietTypeRepositoryFactory.provideMealDietTypeRepository(singletonCImpl.provideMealDietTypeDataSourceProvider.get());

          case 14: // com.recepies.foodrecipesq.domain.repository.SaveUserPrefRepo 
          return (T) UseCaseModule_ProvideSaveUserRepoFactory.provideSaveUserRepo(singletonCImpl.provideMealDietTypeDataSourceProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
