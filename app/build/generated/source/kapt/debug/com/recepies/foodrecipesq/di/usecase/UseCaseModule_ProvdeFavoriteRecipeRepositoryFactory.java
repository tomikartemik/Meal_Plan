// Generated by Dagger (https://dagger.dev).
package com.recepies.foodrecipesq.di.usecase;

import com.recepies.foodrecipesq.domain.datasource.localDatasource.RecipeFavoriteDataSource;
import com.recepies.foodrecipesq.domain.repository.FavoriteRecipeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory implements Factory<FavoriteRecipeRepository> {
  private final Provider<RecipeFavoriteDataSource> favoriteDataSourceProvider;

  public UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory(
      Provider<RecipeFavoriteDataSource> favoriteDataSourceProvider) {
    this.favoriteDataSourceProvider = favoriteDataSourceProvider;
  }

  @Override
  public FavoriteRecipeRepository get() {
    return provdeFavoriteRecipeRepository(favoriteDataSourceProvider.get());
  }

  public static UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory create(
      Provider<RecipeFavoriteDataSource> favoriteDataSourceProvider) {
    return new UseCaseModule_ProvdeFavoriteRecipeRepositoryFactory(favoriteDataSourceProvider);
  }

  public static FavoriteRecipeRepository provdeFavoriteRecipeRepository(
      RecipeFavoriteDataSource favoriteDataSource) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provdeFavoriteRecipeRepository(favoriteDataSource));
  }
}
