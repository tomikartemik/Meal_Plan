// Generated by Dagger (https://dagger.dev).
package com.recepies.foodrecipesq.di.usecase;

import com.recepies.foodrecipesq.domain.datasource.remoteDatasource.recipeDataSource.GetRecipeDataSource;
import com.recepies.foodrecipesq.domain.repository.GetRecipeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideGetRecipeRepositoryFactory implements Factory<GetRecipeRepository> {
  private final Provider<GetRecipeDataSource> getRecipeDataSourceProvider;

  public UseCaseModule_ProvideGetRecipeRepositoryFactory(
      Provider<GetRecipeDataSource> getRecipeDataSourceProvider) {
    this.getRecipeDataSourceProvider = getRecipeDataSourceProvider;
  }

  @Override
  public GetRecipeRepository get() {
    return provideGetRecipeRepository(getRecipeDataSourceProvider.get());
  }

  public static UseCaseModule_ProvideGetRecipeRepositoryFactory create(
      Provider<GetRecipeDataSource> getRecipeDataSourceProvider) {
    return new UseCaseModule_ProvideGetRecipeRepositoryFactory(getRecipeDataSourceProvider);
  }

  public static GetRecipeRepository provideGetRecipeRepository(
      GetRecipeDataSource getRecipeDataSource) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideGetRecipeRepository(getRecipeDataSource));
  }
}
