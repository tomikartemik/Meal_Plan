// Generated by Dagger (https://dagger.dev).
package com.recepies.network.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.converter.scalars.ScalarsConverterFactory;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRetorfitInstanceFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private final Provider<ScalarsConverterFactory> scalerConverterFactoryProvider;

  public NetworkModule_ProvideRetorfitInstanceFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<ScalarsConverterFactory> scalerConverterFactoryProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
    this.scalerConverterFactoryProvider = scalerConverterFactoryProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetorfitInstance(okHttpClientProvider.get(), gsonConverterFactoryProvider.get(), scalerConverterFactoryProvider.get());
  }

  public static NetworkModule_ProvideRetorfitInstanceFactory create(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<ScalarsConverterFactory> scalerConverterFactoryProvider) {
    return new NetworkModule_ProvideRetorfitInstanceFactory(okHttpClientProvider, gsonConverterFactoryProvider, scalerConverterFactoryProvider);
  }

  public static Retrofit provideRetorfitInstance(OkHttpClient okHttpClient,
      GsonConverterFactory gsonConverterFactory, ScalarsConverterFactory scalerConverterFactory) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideRetorfitInstance(okHttpClient, gsonConverterFactory, scalerConverterFactory));
  }
}
